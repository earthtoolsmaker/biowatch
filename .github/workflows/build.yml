name: Build/Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        os: [macos-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Miniforge
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: species-env
          python-version: '3.11'
          auto-update-conda: true

      - name: Install Python dependencies
        shell: bash -l {0}
        run: |
          conda pip install flask flask-cors
          conda pip install speciesnet --use-pep517
          conda list

      - name: Compress conda environment
        shell: bash -l {0}
        run: |
          mkdir -p dist
          CONDA_BASE=$(conda info --base)
          CONDA_ENV_PATH=$CONDA_BASE/envs/species-env

          if [ "$RUNNER_OS" == "Windows" ]; then
            7z a -tzip dist/species-env-${{ runner.os }}.zip $CONDA_ENV_PATH
          else
            tar -czf dist/species-env-${{ runner.os }}.tar.gz -C $CONDA_BASE/envs species-env
          fi

      - name: Upload environment artifact
        uses: actions/upload-artifact@v4
        with:
          name: conda-env-${{ runner.os }}
          path: dist/species-env-${{ runner.os }}.*
          if-no-files-found: error

      - name: Install Node.js dependencies
        run: |
          npm install

      - name: Build on MacOS
        env:
          CSC_LINK: ${{ secrets.APPLE_SIGNING_CERTIFICATE_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
        if: matrix.os == 'macos-latest'
        run: npm run build:mac

      - name: Build on Linux
        if: matrix.os == 'ubuntu-22.04'
        run: npm run build:linux

      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        run: |
          npm run build:win
